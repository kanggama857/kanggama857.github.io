<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>simple-rpc-framework</title>
    <link href="/2024/02/28/rpc/"/>
    <url>/2024/02/28/rpc/</url>
    
    <content type="html"><![CDATA[<h1 id="simple-rpc-framework"><a href="#simple-rpc-framework" class="headerlink" title="simple-rpc-framework"></a>simple-rpc-framework</h1><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/kanggama857/simple-rpc-framework">https://github.com/kanggama857/simple-rpc-framework</a></p><blockquote><p>RPC（Remote Procedure Call Protocol）远程过程调用协议。一个通俗的描述是：客户端在不知道调用细节的情况下，调用存在于远程计算机上的某个对象，就像调用本地应用程序中的对象一样。</p></blockquote><blockquote><p>RPC 协议只规定了 Client 与 Server 之间的点对点调用流程，包括 stub、通信协议、RPC 消息解析等部分，在实际应用中，还需要考虑服务的高可用、负载均衡等问题，所以这里的 RPC 框架指的是能够完成 RPC 调用的解决方案，除了点对点的 RPC 协议的具体实现外，还可以包括服务的发现与注销、提供服务的多台 Server 的负载均衡、服务的高可用等更多的功能。</p></blockquote><p>因为在项目中会不时用到RPC框架，出于对底层原理的好奇，有了这个项目</p><p>simple-rpc-framework是一个开源的项目，<strong>任何企业和个人可以免费学习使用</strong></p><ul><li>实现了<strong>代理层、路由层、注册中心层、序列化层、协议层、容错层</strong>。</li><li>采用 Zookeeper 作为服务注册和发现中心，实现了<strong>服务注册、服务心跳检测、服务上下线通知机制</strong>。</li><li>提供了轮询、加权轮询、随机选择、一致性 Hash 等算法进行<strong>负载均衡</strong>。</li><li>使用<strong>责任链设计模式</strong>过滤请求，在执行请求处理前进行分组转发、日志记录等操作。</li><li>在容错层中引入<strong>超时重传与服务限流</strong>机制，实现服务稳定性治理，确保服务的高可用性。</li><li>通过压力测试，在 100&#x2F;1000&#x2F;10000 的并发场景下，RPC调用的响应速度与结果均保持不变，确认框架<strong>高可用</strong>。</li></ul><h2 id="项目架构图"><a href="#项目架构图" class="headerlink" title="项目架构图"></a>项目架构图</h2><h3 id="技术架构图"><a href="#技术架构图" class="headerlink" title="技术架构图"></a>技术架构图</h3><p><img src="/img/rpc-process.png" alt="rpc-process.png"></p><h2 id="项目用到的技术"><a href="#项目用到的技术" class="headerlink" title="项目用到的技术"></a>项目用到的技术</h2><ul><li>Java 1.8</li><li>Maven</li><li>netty</li><li>zookeeper</li><li>junit</li><li>guava</li><li>Lombok</li><li>protostuff</li><li>hessian</li><li>kryo</li></ul><h2 id="项目模块说明"><a href="#项目模块说明" class="headerlink" title="项目模块说明"></a>项目模块说明</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">├── rpc-consumer<br>│   ├── <span class="hljs-function"><span class="hljs-title">rpc</span>-consumer-demo          -&gt;</span> 未接入spring：consumer测试类<br>│   └── <span class="hljs-function"><span class="hljs-title">rpc</span>-consumer-spring        -&gt;</span> 接入spring：consumer本地服务接口<br>├── <span class="hljs-function"><span class="hljs-title">rpc</span>-core                       -&gt;</span> rpc核心实现逻辑模块<br>├── <span class="hljs-function"><span class="hljs-title">rpc</span>-interface                  -&gt;</span> 远程服务接口<br>├── rpc-provider<br>│   ├── <span class="hljs-function"><span class="hljs-title">rpc</span>-provider-demo          -&gt;</span> 未接入spring：provider测试类<br>│   ├── <span class="hljs-function"><span class="hljs-title">rpc</span>-provider-goods         -&gt;</span> 接入spring：provider远程服务<br>│   ├── <span class="hljs-function"><span class="hljs-title">rpc</span>-provider-pay           -&gt;</span> 接入spring：provider远程服务<br>│   └── <span class="hljs-function"><span class="hljs-title">rpc</span>-provider-user          -&gt;</span> 接入spring：provider远程服务<br>├── <span class="hljs-function"><span class="hljs-title">rpc</span>-spring-starter             -&gt;</span> spring-starter接入类<br>└── <span class="hljs-function"><span class="hljs-title">simple</span>-rpc                     -&gt;</span> 简易rpc<br></code></pre></td></tr></table></figure><h2 id="如何使用本项目"><a href="#如何使用本项目" class="headerlink" title="如何使用本项目"></a>如何使用本项目</h2><ul><li>进入rpc-provider模块下，分别运行rpc-provider-goods、rpc-provider-pay、rpc-provider-user三个服务启动类</li><li>进入rpc-consumer&#x2F;rpc-consumer-spring模块下，运行服务启动类</li><li>Consumer默认端口为8081，在浏览器中输入 <a href="http://localhost:8081/api-test/do-test">http://localhost:8081/api-test/do-test</a> 进行远程服务调用基本测试</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Grape-API接口开放平台</title>
    <link href="/2024/02/24/grape-api/"/>
    <url>/2024/02/24/grape-api/</url>
    
    <content type="html"><![CDATA[<h1 id="GrapeAPI"><a href="#GrapeAPI" class="headerlink" title="GrapeAPI"></a>GrapeAPI</h1><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/kanggama857/Grape-API">https://github.com/kanggama857/Grape-API</a></p><p>基于React + Spring Boot + Dubbo + Gateway的API接口开放调用平台。项目共分为Web系统、模拟接口、公共模块、客户端SDK、API网关这5个子项目。管理员可以接入并发布接口，可视化各接口的调用情况。用户可以开通接口调用权限、浏览接口及在线调试，并通过客户端SDK轻松调用接口。</p><ul><li>根据业务流程，将整个项目后端划分为Web系统、模拟接口、公共模块、客户端SDK、API网关这5个子项目，并使用Maven进行多模块依赖管理和打包。</li><li>使用 Swagger + Knife.4j <strong>自动生成OpenAPI规范的接口文档</strong>，前端在此基础上使用插件自动生成接口请求代码，<strong>降低前后端协作成本</strong>。</li><li>为防止接口被恶意调用，设计 <strong>API 签名认证算法</strong>，为用户分配唯一 ak &#x2F; sk 以鉴权，保障调用的安全性。</li><li>基于 Spring Boot Starter 开发了<strong>客户端 SDK</strong>，一行代码 即可调用接口，提高开发体验。</li><li>选用 <strong>Spring Cloud Gateway</strong> 作为 API 网关，实现了路由转发、访问控制，并集中处理<strong>签名校验、请求参数校验、接口调用统计</strong>等业务逻辑，</li><li>LogBack+Dubbo Filter<strong>全链路日志处理</strong>。</li></ul><h2 id="项目架构图"><a href="#项目架构图" class="headerlink" title="项目架构图"></a>项目架构图</h2><h3 id="业务架构图"><a href="#业务架构图" class="headerlink" title="业务架构图"></a>业务架构图</h3><p><img src="/img/api%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84.jpg" alt="api业务架构.jpg"></p><h3 id="技术架构图"><a href="#技术架构图" class="headerlink" title="技术架构图"></a>技术架构图</h3><p><img src="/img/api%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.png" alt="api系统架构.png"></p><h2 id="项目用到的技术"><a href="#项目用到的技术" class="headerlink" title="项目用到的技术"></a>项目用到的技术</h2><table><thead><tr><th><strong>item</strong></th><th><strong>version</strong></th></tr></thead><tbody><tr><td><strong>JDK</strong></td><td><strong>1.8</strong></td></tr><tr><td><strong>SpringBoot</strong></td><td><strong>2.7.9</strong></td></tr><tr><td><strong>SpringCloud</strong></td><td><strong>2021.0.7.0</strong></td></tr><tr><td><strong>Apache Dubbo</strong></td><td><strong>3.1.6</strong></td></tr><tr><td><strong>OpenAPI</strong></td><td><strong>3</strong></td></tr><tr><td><strong>MySQL</strong></td><td><strong>5.7</strong></td></tr><tr><td><strong>Redis</strong></td><td><strong>6.2</strong></td></tr><tr><td><strong>Mybatis-Plus</strong></td><td><strong>3.5.2</strong></td></tr><tr><td><strong>Nacos</strong></td><td><strong>2.2.1</strong></td></tr></tbody></table><h2 id="项目模块说明"><a href="#项目模块说明" class="headerlink" title="项目模块说明"></a>项目模块说明</h2><ul><li><code>api-backend</code>：管理员可以发布接口、设定是否下线接口等功能，以及查看用户使用接口的情况，例如使用次数，错误调用等。</li><li><code>api-client-sdk</code>：提供一个简化的工具包，使得开发者可以更方便地调用接口，例如提供预封装的HTTP请清求方法、接口调用示例等。</li><li><code>api-common</code>：提供实体类对象，Repository，mapper，自定义异常，常量，自定义注解</li><li><code>api-gateway</code>：负责接口的流量控制，安全防护等功能，提供一致的接口服务质量，和简化API的管理工作。</li><li><code>api-interface</code>：提供模拟接口供开发者使用和测试</li></ul><h2 id="如何使用本项目"><a href="#如何使用本项目" class="headerlink" title="如何使用本项目"></a>如何使用本项目</h2><p>在使用本项目前，执行sql文件夹下的sql文件，<strong>生成对应的表</strong></p><ul><li><strong>方法一：</strong></li></ul><p>下载源码，导入Idea，依次配置运行<code>api-interface</code>、<code>api-backend</code>、<code>api-gateway</code>模块</p><blockquote><p>注意：因为隐藏了配置文件，所以需要修改各个模块下的application.yml配置文件才可以正常启动</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>仿bilibili后端项目</title>
    <link href="/2024/02/23/bilibili/"/>
    <url>/2024/02/23/bilibili/</url>
    
    <content type="html"><![CDATA[<img src="/img/logo.jpg"  /><div align="center"><h1>bilibili(仿)</h1></div><div align="center"><b>基于 Spring Boot 的仿bilibili后端项目</b></div><div align="center"><img src="https://img.shields.io/badge/Java-1.8-orange"/><img src="https://img.shields.io/badge/SpringBoot-2.7.8-green"/><img src="https://img.shields.io/badge/MySQL-8.0-yellowgreen"/><img src="https://img.shields.io/badge/Java--JWT-4.2.1-yellow"/><img src="https://img.shields.io/badge/FastJson-1.2.79-lightgrey"/></div><div align="center"><img src="https://img.shields.io/badge/-MyBatis%20Plus-red"/><img src="https://img.shields.io/badge/-RocketMQ-brightgreen"/><img src="https://img.shields.io/badge/-ElasticSearch-lightgrey"/><img src="https://img.shields.io/badge/-Redis-blue"/><img src="https://img.shields.io/badge/-FastDFS-blueviolet"/><img src="https://img.shields.io/badge/-mahout-orange"/></div><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/kanggama857/bilibili">https://github.com/kanggama857/bilibili</a></p><blockquote><p>注意⚠️：本项目是一个纯后端项目，没有前端页面</p><ul><li>之前发生的b站源码泄漏事件，我表示很遗憾，与此同时很多仿b站架构的项目如雨后春笋，甚至还掀起了一股学习go语言的热潮，也称得上是这次事件的少有的积极影响了</li></ul><p><strong>作为中国国内最成功的视频网站之一，b站的网站架构，功能模块的划分，以及各种“特色功能”（弹幕系统等）非常值得学习</strong></p></blockquote><p><strong>’bilibili‘是一个开源的后端项目，任何企业和个人可以免费学习使用</strong></p><ul><li><p>本项目实现了哔哩哔哩大部分核心功能：<strong>用户（权限）</strong>，<strong>视频</strong>，<strong>弹幕</strong>，<strong>视频流（个性化推荐）</strong>等</p></li><li><p>用户模块运用<strong>三种算法</strong>（RSA，MD5，AES）实现 <strong>JWT-Token</strong> 登录</p></li><li><p>将登录模式进一步改造成<strong>双令牌登录（RefreshToken）</strong>，实现<strong>自动刷新Token</strong>，大大提升了用户体验</p></li><li><p>使用<strong>自定义注解</strong>以及<strong>数据库表设计（用户表，权限表，角色表，关联表）</strong>，设计了一套<strong>可拓展的权限体系</strong>，实现页面，接口，数据等层面的<strong>精细化权限控制</strong></p></li><li><p>使用<strong>Redis缓存</strong>动态相关信息，提升了<strong>动态列表以及视频流的响应速度</strong>与实时性，降低数据库压力</p></li><li><p>使用FastDFS搭建分布式文件系统，将<strong>视频分片</strong>后上传下载，降低了因网络波动导致出错的概率</p></li><li><p>使用RocketMQ实现<strong>动态消息异步推送</strong>，<strong>视频文件信息异步存储</strong>，提升了动态发送，视频上传的速度</p></li><li><p>使用ElasticSearch实现<strong>全文检索并且高亮搜索字段</strong>，让用户拥有良好的搜索体验</p></li><li><p>使用<strong>Mahout推荐算法</strong>量化用户行为，根据用户喜好进行<strong>个性化推荐</strong></p></li><li><p>使用<strong>WebSocket</strong>实现长连接，<strong>发送实时弹幕</strong>，进行<strong>在线观看人数统计</strong></p></li><li><p>采用前后端分离的开发模式，项目目前只有后端</p></li><li><p>为了便于开发，这里从文件系统上分为了dao，service，api三个模块，并没有完全按照功能划分</p></li><li><p>会持续改进，后续可能考虑上线</p></li></ul><h2 id="项目架构图"><a href="#项目架构图" class="headerlink" title="项目架构图"></a>项目架构图</h2><h3 id="业务架构图"><a href="#业务架构图" class="headerlink" title="业务架构图"></a>业务架构图</h3><p><img src="/img/b%E7%AB%99%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84.png" alt="b站项目业务架构"></p><h3 id="技术架构图"><a href="#技术架构图" class="headerlink" title="技术架构图"></a>技术架构图</h3><p><img src="/img/b%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84.png" alt="b站技术架构"></p><h2 id="项目用到的技术"><a href="#项目用到的技术" class="headerlink" title="项目用到的技术"></a>项目用到的技术</h2><ul><li>Java 1.8</li><li>Spring Boot 2.x</li><li>MyBatis (Plus)</li><li>MySQL</li><li>Redis</li><li>ElasticSearch</li><li>RocketMQ</li><li>FastDFS</li><li>JWT</li><li>Mahout</li><li>FastJson</li></ul><h2 id="项目模块说明"><a href="#项目模块说明" class="headerlink" title="项目模块说明"></a>项目模块说明</h2><ul><li><code>bilibili-api</code>：项目核心模块，提供项目对外API接口以及权限校验</li><li><code>bilibili-service</code>：提供各种配置类以及工具类，拦截器等，提供服务接口（Interface）及其实现类</li><li><code>bilibili-dao</code>：提供实体类对象，Repository，mapper，自定义异常，常量，自定义注解</li></ul><h2 id="如何使用本项目"><a href="#如何使用本项目" class="headerlink" title="如何使用本项目"></a>如何使用本项目</h2><p>在使用本项目前，请在MySQL中<strong>新建‘bilibili’数据库</strong>，然后执行sql文件夹下的sql文件，<strong>生成对应的表</strong></p><ul><li><strong>方法一：</strong></li></ul><p>下载源码，导入Idea，配置运行<code>bilibili-api</code>模块下的<code>BilibiliApp</code>即可</p><blockquote><p>注意：因为隐藏了配置文件，所以需要修改各个模块下的application.yml配置文件才可以正常启动</p></blockquote><ul><li><strong>方法二：</strong></li></ul><p>使用<code>java -jar</code> 命令运行<code>bilibili-api</code>模块下的 <code>bilibili-api-1.0-SNAPSHOT.jar</code> 即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
